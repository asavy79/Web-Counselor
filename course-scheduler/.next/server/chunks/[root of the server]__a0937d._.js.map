{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["file:///app/src/auth.ts"],"sourcesContent":["\nimport NextAuth from \"next-auth\"\nimport Google from \"next-auth/providers/google\"\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n    providers: [Google],\n    callbacks: {\n        async session({ session, token }) {\n            session.user.id = token.sub as string;\n            return session;\n        },\n        async jwt({ token, user }) {\n            if (user) {\n                token.id = user.id;\n            }\n            return token;\n        },\n        async signIn({user, email, credentials}) {\n            console.log(\"User: \", user);\n            const response = await fetch(\"http://fastapi:8000/student\", {\n                method: \"POST\",\n                body: JSON.stringify({email: user.email, student_name: user.name}),\n                headers: {\"Content-Type\": \"application/json\"}\n            })\n            if(!response.ok){\n                console.log('issue finding or creating user');\n                return true;\n            }\n            const data = await response.json();\n            console.log(\"Data: \", data);\n            return true;\n        }\n    },\n})"],"names":[],"mappings":";;;;;;AACA;AACA;AADA;AACA;;;AAEO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,uJAAA,CAAA,UAAQ,AAAD,EAAE;IACxD,WAAW;QAAC,uJAAA,CAAA,UAAM;KAAC;IACnB,WAAW;QACP,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC5B,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;YAC3B,OAAO;QACX;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACrB,IAAI,MAAM;gBACN,MAAM,EAAE,GAAG,KAAK,EAAE;YACtB;YACA,OAAO;QACX;QACA,MAAM,QAAO,EAAC,IAAI,EAAE,KAAK,EAAE,WAAW,EAAC;YACnC,QAAQ,GAAG,CAAC,UAAU;YACtB,MAAM,WAAW,MAAM,MAAM,+BAA+B;gBACxD,QAAQ;gBACR,MAAM,KAAK,SAAS,CAAC;oBAAC,OAAO,KAAK,KAAK;oBAAE,cAAc,KAAK,IAAI;gBAAA;gBAChE,SAAS;oBAAC,gBAAgB;gBAAkB;YAChD;YACA,IAAG,CAAC,SAAS,EAAE,EAAC;gBACZ,QAAQ,GAAG,CAAC;gBACZ,OAAO;YACX;YACA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,QAAQ,GAAG,CAAC,UAAU;YACtB,OAAO;QACX;IACJ;AACJ"}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file:///app/src/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { generateCourseRecommendations } from '@/lib/chatgpt';\nimport { myTakenCourses, courses } from '@/lib/cs-courses';\nimport { auth } from '@/auth';\n\nexport async function POST(request: NextRequest) {\n\n    const session = await auth();\n    const { question } = await request.json();\n\n    const email = session?.user?.email;\n    try {\n        const response = await fetch(\"http://fastapi:8000/query\",\n            {\n                method: \"POST\",\n                body: JSON.stringify({ question: question, email: email }),\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n        )\n        if (!response.ok) {\n            return NextResponse.json({ error: 'Failed to process request' }, { status: 500 });\n        }\n\n        const data = await response.json();\n        return NextResponse.json({ response: data.response });\n    } catch (error) {\n        console.log(error);\n        return NextResponse.json({ error: 'Failed to process request' }, { status: 500 });\n    }\n} "],"names":[],"mappings":";;;AAAA;AAGA;;;AAEO,eAAe,KAAK,OAAoB;IAE3C,MAAM,UAAU,MAAM,CAAA,GAAA,6GAAA,CAAA,OAAI,AAAD;IACzB,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;IAEvC,MAAM,QAAQ,SAAS,MAAM;IAC7B,IAAI;QACA,MAAM,WAAW,MAAM,MAAM,6BACzB;YACI,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;gBAAE,UAAU;gBAAU,OAAO;YAAM;YACxD,SAAS;gBACL,gBAAgB;YACpB;QACJ;QAEJ,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA4B,GAAG;gBAAE,QAAQ;YAAI;QACnF;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,UAAU,KAAK,QAAQ;QAAC;IACvD,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACnF;AACJ"}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}